<?xml version="1.0" encoding="utf-8"?>
<Fractal xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Equation>
    <Code>public static void GetColor(double p, double q,out double r,out double g,out double index)
{
	double bigX,bigY;
	double x=0,y=0;
	r = 0; g = 0; index = 64;
	for (int i = 0;i &lt;= 64;i++)
	{
		bigX = x*x - y*y + p;
		bigY = 2*x*y + q;
		if (double.IsNaN(bigX) || double.IsNaN(bigY))
		{
			index = i;
			return;
		}
		x = bigX;
		y = bigY;
	}
	return;
}</Code>
  </Equation>
  <View>
    <Xpos>-0.63324079111829223</Xpos>
    <Ypos>-0.00030521787341407976</Ypos>
    <Xzoom>0.92470733472712741</Xzoom>
    <Yzoom>0.92470733472712741</Yzoom>
    <Angle>0</Angle>
    <TargetAngle>0</TargetAngle>
  </View>
  <ColorMap>
    <Code>static public Color[] c = new Color[65];
static bool done = false;
static public void MakeColors()
{
	const int gr = 8;
	if (done) return;
	done = true;
	Random r = new Random( 9 );
	c[0] = Color.FromArgb(r.Next(255),r.Next(255),r.Next(255));
	for (int i = 0; i &lt; 64;i += gr)
	{
		c[i+gr] = Color.FromArgb(r.Next(255),r.Next(255),r.Next(255));
		for (int j = 1; j &lt; gr; j++)
			c[i+j] = Color.FromArgb(
				( c[i].R*(gr-j) + c[i+gr].R*j )/gr,
				( c[i].G*(gr-j) + c[i+gr].G*j )/gr,
				( c[i].B*(gr-j) + c[i+gr].B*j )/gr
				);
	}
	//c[64] = c[0];
	c[64] = Color.Black;
}</Code>
  </ColorMap>
</Fractal>