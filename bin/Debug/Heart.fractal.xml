<SOAP-ENV:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:SOAP-ENC="http://schemas.xmlsoap.org/soap/encoding/" xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" xmlns:clr="http://schemas.microsoft.com/soap/encoding/clr/1.0" SOAP-ENV:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
<SOAP-ENV:Body>
<a1:Settings id="ref-1" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Fractals/Fractals%2C%20Version%3D1.0.1743.40520%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3Dnull">
<equations href="#ref-3"/>
<lastEquation id="ref-4">Heart</lastEquation>
<views href="#ref-5"/>
<lastView id="ref-6">Overview</lastView>
<colorPaletes href="#ref-7"/>
<lastColorPalete id="ref-8">Red</lastColorPalete>
<customCodes href="#ref-9"/>
<lastCustomCode id="ref-10"></lastCustomCode>
<savingRules href="#ref-11"/>
<lastSavingRule href="#ref-10"/>
<commentes id="ref-12">Made by David Srbecky</commentes>
</a1:Settings>
<a2:Hashtable id="ref-3" xmlns:a2="http://schemas.microsoft.com/clr/ns/System.Collections">
<LoadFactor>0.72</LoadFactor>
<Version>53</Version>
<KeyComparer xsi:null="1"/>
<HashSize>11</HashSize>
<Keys href="#ref-13"/>
<Values href="#ref-14"/>
</a2:Hashtable>
<a2:Hashtable id="ref-5" xmlns:a2="http://schemas.microsoft.com/clr/ns/System.Collections">
<LoadFactor>0.72</LoadFactor>
<Version>46</Version>
<KeyComparer xsi:null="1"/>
<HashSize>11</HashSize>
<Keys href="#ref-15"/>
<Values href="#ref-16"/>
</a2:Hashtable>
<a2:Hashtable id="ref-7" xmlns:a2="http://schemas.microsoft.com/clr/ns/System.Collections">
<LoadFactor>0.72</LoadFactor>
<Version>80</Version>
<KeyComparer xsi:null="1"/>
<HashSize>11</HashSize>
<Keys href="#ref-17"/>
<Values href="#ref-18"/>
</a2:Hashtable>
<a2:Hashtable id="ref-9" xmlns:a2="http://schemas.microsoft.com/clr/ns/System.Collections">
<LoadFactor>0.72</LoadFactor>
<Version>0</Version>
<KeyComparer xsi:null="1"/>
<HashSize>11</HashSize>
<Keys href="#ref-19"/>
<Values href="#ref-20"/>
</a2:Hashtable>
<a2:Hashtable id="ref-11" xmlns:a2="http://schemas.microsoft.com/clr/ns/System.Collections">
<LoadFactor>0.72</LoadFactor>
<Version>0</Version>
<KeyComparer xsi:null="1"/>
<HashSize>11</HashSize>
<Keys href="#ref-21"/>
<Values href="#ref-22"/>
</a2:Hashtable>
<SOAP-ENC:Array id="ref-13" SOAP-ENC:arrayType="xsd:anyType[2]">
<item id="ref-23" xsi:type="SOAP-ENC:string">Heart</item>
<item id="ref-24" xsi:type="SOAP-ENC:string">General</item>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-14" SOAP-ENC:arrayType="xsd:anyType[2]">
<item id="ref-25" xsi:type="SOAP-ENC:string">public static void GetColor(double p, double q,out double r,out double g,out double index)
{
	MakeColors();
	double bigX,bigY;
	double x=0,y=0;
	r = 0; g = 0; index = 64;
	for (int i = 0;i &#60;= 64;i++)
	{
		bigX = x*x - y*y - q-0.5;
		bigY = 2*x*y*x + p;
		if (double.IsNaN(bigX) || double.IsNaN(bigY))
		{
			index = i;
			return;
		}
		x = bigX;
		y = bigY;
	}
	return;
}</item>
<item id="ref-26" xsi:type="SOAP-ENC:string">public static void GetColor(double p, double q,out double r,out double g,out double index)
{
	MakeColors();
	double bigX,bigY;
	double x=0,y=0;
	r = 0; g = 0; index = 64;
	for (int i = 0;i &#60;= 64;i++)
	{
		bigX = x*x - y*y + p;
		bigY = 2*x*y*x*y + q;
		if (double.IsNaN(bigX) || double.IsNaN(bigY))
		{
			index = i;
			return;
		}
		x = bigX;
		y = bigY;
	}
	return;
}</item>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-15" SOAP-ENC:arrayType="xsd:anyType[2]">
<item id="ref-27" xsi:type="SOAP-ENC:string">Overview</item>
<item id="ref-28" xsi:type="SOAP-ENC:string">AA</item>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-16" SOAP-ENC:arrayType="xsd:anyType[2]">
<item xsi:type="a1:View" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Fractals/Fractals%2C%20Version%3D1.0.1743.40520%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3Dnull">
<Xpos>0.0695715194955347</Xpos>
<Ypos>0.0316551310833557</Ypos>
<Xzoom>0.20256661643480059</Xzoom>
<Yzoom>0.20256661643480059</Yzoom>
<antiAliasingLevel>4</antiAliasingLevel>
<edgeOnlyAntiAliasing>true</edgeOnlyAntiAliasing>
</item>
<item xsi:type="a1:View" xmlns:a1="http://schemas.microsoft.com/clr/nsassem/Fractals/Fractals%2C%20Version%3D1.0.1743.40520%2C%20Culture%3Dneutral%2C%20PublicKeyToken%3Dnull">
<Xpos>0.778216496993767</Xpos>
<Ypos>-1.4554987895424</Ypos>
<Xzoom>536870912</Xzoom>
<Yzoom>536870912</Yzoom>
<antiAliasingLevel>4</antiAliasingLevel>
<edgeOnlyAntiAliasing>true</edgeOnlyAntiAliasing>
</item>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-17" SOAP-ENC:arrayType="xsd:anyType[4]">
<item id="ref-29" xsi:type="SOAP-ENC:string">Random</item>
<item id="ref-30" xsi:type="SOAP-ENC:string">Blue</item>
<item id="ref-31" xsi:type="SOAP-ENC:string">Red</item>
<item id="ref-32" xsi:type="SOAP-ENC:string">Blue spider</item>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-18" SOAP-ENC:arrayType="xsd:anyType[4]">
<item id="ref-33" xsi:type="SOAP-ENC:string">static public Color[] c = new Color[65];
static bool done = false;
static public void MakeColors()
{
	if (done) return;
	done = true;
	Random r = new Random(2);
	for (int i = 0; i &#60; 65;i++)
	{
		c[i] = Color.FromArgb(r.Next(255),r.Next(255),r.Next(255));
	}
}</item>
<item id="ref-34" xsi:type="SOAP-ENC:string">static public Color[] c = new Color[65];
static bool done = false;
static public void MakeColors()
{
	if (done) return;
	done = true;
	Random r = new Random(2);
	for (int i = 0; i &#60; 64;i++)
	{
		c[i] = Color.FromArgb(0,0,i*4);
	}
	c[64] = Color.FromArgb(0,0,255);
}</item>
<item id="ref-35" xsi:type="SOAP-ENC:string">static public Color[] c = new Color[65];
static bool done = false;
static public void MakeColors()
{
	if (done) return;
	done = true;
	Random r = new Random(2);
	for (int i = 0; i &#60; 64;i++)
	{
		c[i] = Color.FromArgb(i*4,0,0);
	}
	c[64] = Color.FromArgb(150,0,0);
}</item>
<item id="ref-36" xsi:type="SOAP-ENC:string">static public Color[] c = new Color[65];
static bool done = false;
static public void MakeColors()
{
	if (done) return;
	done = true;
	Random r = new Random(2);
	for (int i = 0; i &#60; 64;i++)
	{
		c[i] = Color.FromArgb(0,0,0);
	}
	c[64] = Color.FromArgb(0,0,255);
}</item>
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-19" SOAP-ENC:arrayType="xsd:anyType[0]">
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-20" SOAP-ENC:arrayType="xsd:anyType[0]">
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-21" SOAP-ENC:arrayType="xsd:anyType[0]">
</SOAP-ENC:Array>
<SOAP-ENC:Array id="ref-22" SOAP-ENC:arrayType="xsd:anyType[0]">
</SOAP-ENC:Array>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>
